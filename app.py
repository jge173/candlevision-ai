import streamlit as st
from PIL import Image
import io
from inference_sdk import InferenceHTTPClient

st.set_page_config(page_title="Agente de IA Financeiro", layout="wide")
st.title("üìä An√°lise de Padr√µes de Velas com IA")

# Upload de imagem
uploaded_file = st.file_uploader("Envie uma imagem do gr√°fico de velas", type=["png", "jpg", "jpeg"])

if uploaded_file:
    try:
        # 1. Carregamento e convers√£o segura da imagem
        image = Image.open(uploaded_file)
        
        # Verifica√ß√£o e convers√£o de formato
        if image.mode in ('RGBA', 'P', 'LA'):
            image = image.convert('RGB')
            st.warning("‚ö†Ô∏è Imagem convertida para RGB para compatibilidade")
        
        # 2. Exibi√ß√£o da imagem processada
        st.image(image, 
                caption="Imagem enviada para an√°lise",
                use_column_width=True,
                output_format="JPEG")

        # 3. Prepara√ß√£o para envio √† API
        st.info("üîç Enviando imagem para an√°lise...")
        
        # Converter para bytes com tratamento expl√≠cito
        img_buffer = io.BytesIO()
        image.save(img_buffer, format='JPEG', quality=95)
        img_data = img_buffer.getvalue()
        
        # 4. Configura√ß√£o do cliente Roboflow
        CLIENT = InferenceHTTPClient(
            api_url="https://detect.roboflow.com",
            api_key="PEyV0064YFk1pNh46OS6"  # Lembre-se de usar vari√°veis de ambiente em produ√ß√£o
        )
        
        # 5. Chamada √† API com tratamento robusto
        result = CLIENT.infer(img_data, model_id="candle-patterns/1")
        
        # 6. Processamento dos resultados
        if result and "predictions" in result:
            predictions = result["predictions"]
            if predictions:
                prediction = predictions[0]
                st.success(
                    f"**Padr√£o detectado:** {prediction['class'].upper()}\n"
                    f"**Confian√ßa:** {prediction['confidence']:.2%}"
                )
                
                # Sugest√µes de trading
                if "bullish" in prediction['class'].lower():
                    st.markdown("üü¢ **Sugest√£o:** Posi√ß√£o de COMPRA")
                    st.progress(prediction['confidence'])
                elif "bearish" in prediction['class'].lower():
                    st.markdown("üî¥ **Sugest√£o:** Posi√ß√£o de VENDA")
                    st.progress(prediction['confidence'])
                else:
                    st.markdown("üü° **Sugest√£o:** Manter posi√ß√£o atual")
            else:
                st.warning("‚ö†Ô∏è Nenhum padr√£o reconhec√≠vel detectado")
        else:
            st.warning("‚ö†Ô∏è A an√°lise n√£o retornou resultados v√°lidos")

    except Exception as e:
        st.error(f"‚ùå Erro no processamento: {str(e)}")
        st.error("Dica: Tente enviar a imagem novamente ou em outro formato")

# Rodap√© profissional
st.markdown("---")
st.caption("""
**Vers√£o 2.0** ‚Ä¢ Sistema de an√°lise de padr√µes candlestick ‚Ä¢  
Desenvolvido por Jefferson ‚Ä¢ Modelo hospedado via Roboflow API  
√öltima atualiza√ß√£o: Agosto 2024
""")
