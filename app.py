import streamlit as st
import requests
from PIL import Image
import io
from inference_sdk import InferenceHTTPClient 

st.set_page_config(page_title="Agente de IA Financeiro", layout="wide")
st.title("üìä An√°lise de Padr√µes de Velas com IA")

# Upload de imagem
uploaded_file = st.file_uploader("Envie uma imagem do gr√°fico de velas", type=["png", "jpg", "jpeg"])

if uploaded_file:
    try:
        # Abrir e converter imagem para RGB se necess√°rio
        image = Image.open(uploaded_file)
        
        # Converter RGBA para RGB se a imagem tiver transpar√™ncia
        if image.mode == 'RGBA':
            image = image.convert('RGB')
            
        st.image(image, caption="Imagem enviada", use_column_width=True)

        # Enviar imagem para Roboflow
        st.info("üîç Enviando imagem para an√°lise...")
        
        # Configura√ß√£o do cliente Roboflow
        CLIENT = InferenceHTTPClient(
            api_url="https://detect.roboflow.com",
            api_key="PEyV0064YFk1pNh46OS6"  # Sua chave API (considere usar vari√°veis de ambiente)
        )
        
        # Converter a imagem para bytes no formato JPEG
        img_bytes = io.BytesIO()
        image.save(img_bytes, format='JPEG')
        img_bytes.seek(0)  # Voltar ao in√≠cio do buffer
        
        # Infer√™ncia com tratamento de erros
        result = CLIENT.infer(img_bytes.getvalue(), model_id="candle-patterns/1")
        
        if result.get("predictions"):
            predictions = result["predictions"]
            if predictions:  # Verifica se h√° predi√ß√µes
                pattern = predictions[0].get("class", "Padr√£o n√£o identificado")
                confidence = predictions[0].get("confidence", 0)
                
                st.success(f"**Padr√£o detectado**: {pattern} (Confian√ßa: {confidence:.2%})")
                
                # Sugest√µes baseadas no padr√£o
                if "bullish" in pattern.lower():
                    st.markdown("‚úÖ **Sugest√£o**: Potencial sinal de COMPRA")
                elif "bearish" in pattern.lower():
                    st.markdown("‚ùå **Sugest√£o**: Potencial sinal de VENDA")
                else:
                    st.markdown("‚ûñ **Sugest√£o**: Manter posi√ß√£o ou aguardar confirma√ß√£o")
            else:
                st.warning("‚ö†Ô∏è Nenhum padr√£o reconhecido foi detectado na imagem.")
        else:
            st.warning("‚ö†Ô∏è A API n√£o retornou predi√ß√µes v√°lidas. Verifique o modelo.")
            
    except requests.exceptions.RequestException as e:
        st.error(f"üî¥ Erro de conex√£o com a API: {str(e)}")
    except Exception as e:
        st.error(f"üî¥ Erro inesperado: {str(e)}")

# Rodap√©
st.markdown("---")
st.caption("Vers√£o 1.1 ‚Ä¢ Desenvolvido por Jefferson ‚Ä¢ Modelo hospedado via Roboflow")
